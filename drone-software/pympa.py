import ctypes as ct
import numpy as np

# This is the autogenerated file that contains all of the types and macros
# from modal_pipe_interfaces.h
from pympa_types import *

pympa = ct.CDLL("libmodal_pipe.so")

pympa.create_pub.argtypes  = [ct.POINTER(ct.c_uint8), ct.POINTER(ct.c_uint8),
                              ct.POINTER(ct.c_uint8), ct.c_int]
pympa.create_pub.restype   = ct.c_int

pympa.publish_imu.argtypes = [ct.c_int, ct.c_void_p]
pympa.publish_imu.restype  = ct.c_int

pympa.close_pub.argtypes = [ct.c_int]

pympa.close_sub.argtypes = [ct.c_int]

pympa.get_num_clients.argtypes = [ct.c_int]
pympa.get_num_clients.restype  = ct.c_int

pympa.get_image.argtypes  = [ct.c_int, ct.POINTER(ct.c_uint8), ct.c_void_p]
pympa.get_image.restype   = ct.c_int

pympa.publish_image.argtypes  = [ct.c_int, ct.POINTER(ct.c_uint8), ct.c_void_p]
pympa.publish_image.restype   = ct.c_int

def pympa_create_pub(pipe_name, publisher_name, data_type):
    pipe_name_np  = np.asarray((pipe_name+'\0').encode('utf-8'))
    pub_name_np   = np.asarray((publisher_name+'\0').encode('utf-8'))
    data_type_np  = np.asarray((data_type+'\0').encode('utf-8'))
    if data_type == 'imu_data_t':
        return pympa.create_pub(pipe_name_np.ctypes.data_as(ct.POINTER(ct.c_uint8)),
                                pub_name_np.ctypes.data_as(ct.POINTER(ct.c_uint8)),
                                data_type_np.ctypes.data_as(ct.POINTER(ct.c_uint8)),
                                IMU_RECOMMENDED_PIPE_SIZE)
    else:
        return pympa.create_pub(pipe_name_np.ctypes.data_as(ct.POINTER(ct.c_uint8)),
                                pub_name_np.ctypes.data_as(ct.POINTER(ct.c_uint8)),
                                data_type_np.ctypes.data_as(ct.POINTER(ct.c_uint8)),
                                64*1024*1024)

def pympa_publish_imu(channel, imu_data):
    return pympa.publish_imu(channel, ct.byref(imu_data))

def pympa_get_num_clients(channel):
    return pympa.get_num_clients(channel)

def pympa_close_pub(channel):
    return pympa.close_pub(channel)

def pympa_close_sub(channel):
    return pympa.close_sub(channel)

def pympa_camera_subscribe(camera_name, client_name):
    pipe_name_np  = np.asarray((camera_name+'\0').encode('utf-8'))
    sub_name_np   = np.asarray((client_name+'\0').encode('utf-8'))
    return pympa.camera_subscribe(pipe_name_np.ctypes.data_as(ct.POINTER(ct.c_uint8)), sub_name_np.ctypes.data_as(ct.POINTER(ct.c_uint8)))

def pympa_get_image(channel, frame, meta):
    return pympa.get_image(channel, frame.ctypes.data_as(ct.POINTER(ct.c_uint8)), ct.byref(meta))

def pympa_publish_image(channel, frame, meta):
    return pympa.publish_image(channel, frame.ctypes.data_as(ct.POINTER(ct.c_uint8)), ct.byref(meta))
